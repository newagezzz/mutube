import {Text, View, StyleSheet, TouchableOpacity } from 'react-native';
import { useState, useEffect } from 'react';
import TextTicker from 'react-native-text-ticker'
import { Audio } from "expo-av";
//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import Icon from 'react-native-vector-icons/FontAwesome';

const Artist = () => {
  console.log("!!!!!!!!!!!!!!!!Artist!!!!!!!!!!!!!!!!");
  const [isRecording, setIsRecording] = useState(false);
  const [recording, setRecording] = useState(null);
  const [recordingStatus, setRecordingStatus] = useState("idle");
  const [audioPermission, setAudioPermission] = useState(false);
  const [recordedAudio, setRecordedAudio] = useState(null);

  useEffect(() => {
    async function getPermission() {
      await Audio.requestPermissionsAsync()
        .then((permission) => {
          console.log("Permission Granted: " + permission.granted);
          setAudioPermission(permission.granted);
        })
        .catch((error) => {
          console.log(error);
        });
    }

    getPermission();
    return () => {
      if (recording) {
        stopRecording();
      }
    };
  }, []);  

  async function handleRecordButtonPress() {
    console.log("------------------handleRecordButtonPress----------------");
    //setRecordedAudio(null);
    //setRecording(null);
    if (isRecording) {
      const audioUri = await stopRecording();
      if (audioUri != null) {
        console.log("Saved audio file to", audioUri);
      } else {
        console.log("Audio file not saved!!!");
      }

    } else {
      await startRecording();
    }
  }

  async function startRecording() {
    console.log("------------------startRecording----------------");
    // Check if a recording is already in progress
    if (isRecording) {
      console.warn("A recording is already in progress");
      return;
    }

    setIsRecording(true);
    //setRecording();
    setRecordedAudio(null);

    // Check for permissions before starting the recording
    if (!audioPermission) {
      console.warn("Audio permission is not granted");
      return;
    }
    try {
      // needed for IOS, If you develop mainly on IOS device or emulator, 
      // there will be error if you don't include this.
      if (audioPermission) {
        await Audio.setAudioModeAsync({
          allowsRecordingIOS: true,
          playsInSilentModeIOS: true,
        });
      }

      const newRecording = new Audio.Recording();
      console.log("Starting Recording");
      await newRecording.prepareToRecordAsync(
        Audio.RecordingOptionsPresets.HIGH_QUALITY
      );
      await newRecording.startAsync();
      setRecording(newRecording);
      setRecordingStatus("recording");
      console.log("recording...............");
    } catch (error) {
      console.error("Failed to start recording", error);
    }
  }

  async function stopRecording() {
    console.log("------------------stopRecording----------------");
    setIsRecording(false);
    try {
      if (recordingStatus === "recording") {
        console.log("Stopping Recording");
        await recording.stopAndUnloadAsync();
        const uri = recording.getURI();

        setRecordedAudio({
          uri,
          name: `recording-${Date.now()}.m4a`, // Change the file extension to .m4a
          type: "audio/m4a", // Update the type to M4A
        });

        // resert our states to record again
        setRecording(null);
        setRecordingStatus("stopped");
      }
    } catch (error) {
      console.error("Failed to stop recording", error);
    }
  }

  return (
    <View>
      <TextTicker style={{ fontSize: 24 }} duration={3000} loop bounce repeatSpacer={50} marqueeDelay={1000}>
        Artist...Artist...Artist...!!!Under Construction!!!!!!Under Construction!!!!!!Under Construction!!!!!!Under Construction!!!
      </TextTicker>
      <TextTicker style={{ fontSize: 24 }} duration={3000} loop bounce repeatSpacer={50} marqueeDelay={1000}>
        Artist...Artist...Artist...!!!Under Construction!!!!!!Under Construction!!!!!!Under Construction!!!!!!Under Construction!!!
      </TextTicker>
      <TextTicker style={{ fontSize: 24 }} duration={3000} loop bounce repeatSpacer={50} marqueeDelay={1000}>
        Artist...Artist...Artist...!!!Under Construction!!!!!!Under Construction!!!!!!Under Construction!!!!!!Under Construction!!!
      </TextTicker>
      <TextTicker style={{ fontSize: 24 }} duration={3000} loop bounce repeatSpacer={50} marqueeDelay={1000}>
        Artist...Artist...Artist...!!!Under Construction!!!!!!Under Construction!!!!!!Under Construction!!!!!!Under Construction!!!
      </TextTicker>
      <View style={styles.voiceContainer}>
        <TouchableOpacity style={styles.voiceButton} onPress={handleRecordButtonPress}>
          <Icon name="microphone"  color={isRecording ? "red" : "blue"} />
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  voiceButton: {
    alignItems: "center",
    justifyContent: "center",
    width: 30,
    height: 30,
    borderRadius: 15,
  },
  voiceContainer: {
    paddingTop: 4,
    flex: 1,
    //alignItems: "left",
    //justifyContent: "left",
  },
});

export default Artist;

